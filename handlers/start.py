import os
import asyncio
from aiogram import types, F, Router, Bot
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from celery.result import AsyncResult
from states.load_states import AuthCompanyStates

from keybords.main_kb import main_menu_kb
from utils.upload_excel import generate_upload_and_get_links, list_admin_weeks, get_yadisk_public_url
from data.database import conn
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
router = Router()

ADMIN_IDS = [5469335222, 5459748606]
 

# @router.message()
# async def get_chat_id(message: types.Message):
#     chat_id = message.chat.id
#     await message.reply(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}")



@router.message(F.text == '/start')
async def start_handler(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", reply_markup=main_menu_kb())
        return

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    await state.set_state(AuthCompanyStates.waiting_for_code)

@router.message(F.text == "/cancel")
async def cancel(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())

@router.message(F.text.startswith('/auth'))
async def auth_via_command(message: Message, state: FSMContext):
    try:
        _, code = message.text.strip().split(maxsplit=1)
    except ValueError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n`/auth <–∫–æ–¥>`", parse_mode="Markdown")
        return

    cursor = conn.cursor()
    cursor.execute("SELECT id FROM companies WHERE code = ?", (code,))
    row = cursor.fetchone()
    if not row:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    company_id = row[0]
    cursor.execute(
        "INSERT OR REPLACE INTO user_company (user_id, company_id) VALUES (?, ?)",
        (message.from_user.id, company_id)
    )
    conn.commit()

    await message.answer("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", reply_markup=main_menu_kb())


@router.message(F.text == "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
async def instruction_handler(message: Message):
    text = (
        "‚ÑπÔ∏è **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç:**\n\n"
        "1. –ù–∞–∂–º–∏—Ç–µ üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (–¥–µ–Ω—å / –Ω–æ—á—å / –∑–∞–ø–∞–π–∫–∞)\n"
        "4. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π\n\n"
        "–ï—Å–ª–∏ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –ø–æ—Ä—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å ‚Äî –±–æ—Ç –∏—Ö —Å—É–º–º–∏—Ä—É–µ—Ç –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ—Ç.\n"
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∏–ª–∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n"
        "‚ùì –î–ª—è —Å–≤—è–∑–∏ –Ω–∞–∂–º–∏—Ç–µ üí¨ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
    )
    await message.answer(text)


#admin
@router.message(F.text.startswith('/create_company'))
async def create_company_handler(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    try:
        _, name, code = message.text.split(maxsplit=2)
    except ValueError:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/create_company <–Ω–∞–∑–≤–∞–Ω–∏–µ> <–∫–æ–¥>")
        return

    cursor = conn.cursor()
    cursor.execute("SELECT id FROM companies WHERE code = ?", (code,))
    if cursor.fetchone():
        await message.answer(f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è —Å –∫–æ–¥–æ–º '{code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    cursor.execute(
        "INSERT INTO companies (name, code) VALUES (?, ?)",
        (name, code)
    )
    conn.commit()
    await message.answer(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è '{name}' —Å –∫–æ–¥–æ–º '{code}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")


# üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π
@router.message(F.text.startswith("/companies"))
async def list_companies(message: types.Message):
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT name FROM companies ORDER BY name")
    companies = [row[0] for row in cursor.fetchall()]
    
    if not companies:
        await message.answer("‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.")
        return

    companies_list = "\n".join(f"‚Ä¢ {c}" for c in companies)
    await message.answer(f"üì¶ –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π:\n\n{companies_list}")

# ‚ùå –£–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–∞–Ω–∏—é
@router.message(F.text.startswith("/delete_company"))
async def delete_company(message: types.Message):
    parts = message.text.strip().split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: `/delete_company –ù–∞–∑–≤–∞–Ω–∏–µ_–ö–æ–º–ø–∞–Ω–∏–∏`", parse_mode="Markdown")
        return

    company_name = parts[1]

    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM companies WHERE name = ?", (company_name,))
    count = cursor.fetchone()[0]

    if count == 0:
        await message.answer(f"‚ùå –ö–æ–º–ø–∞–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º `{company_name}` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="Markdown")
        return

    cursor.execute("DELETE FROM companies WHERE name = ?", (company_name,))
    conn.commit()
    await message.answer(f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è `{company_name}` –∏ –µ—ë {count} –∑–∞—è–≤–æ–∫ —É–¥–∞–ª–µ–Ω—ã.", parse_mode="Markdown")



@router.message(F.text == "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –Ø.–î–∏—Å–∫")
async def yandex_link_handler(message: Message, state: FSMContext, bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    cursor = conn.cursor()
    cursor.execute("SELECT name FROM companies "
                   "JOIN user_company ON companies.id = user_company.company_id "
                   "WHERE user_company.user_id = ?", (message.from_user.id,))
    row = cursor.fetchone()
    if not row:
        await message.answer("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ /auth <–∫–æ–¥>.")
        return

    company_name = row[0]
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫...")

    task = generate_upload_and_get_links.delay(
        user_id=message.from_user.id,
        company_name=company_name
    )
    asyncio.create_task(check_task_and_send_result(bot, message.from_user.id, task.id))


async def check_admin_excel_result(bot: Bot, chat_id: int, task_id: str):
    for _ in range(20): 
        await asyncio.sleep(1)
        result = AsyncResult(task_id)
        if result.ready():
            if result.successful():
                data = result.get()
                admin_link = data.get("admin_link")
                if admin_link:
                    await bot.send_message(chat_id, f"üõ† –ê–¥–º–∏–Ω-—Ñ–∞–π–ª –≥–æ—Ç–æ–≤:\n{admin_link}")
                else:
                    await bot.send_message(chat_id, "–§–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.")
            return
    await bot.send_message(chat_id, "‚è± –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



async def check_task_and_send_result(bot, chat_id, task_id):
    for _ in range(20):  
        await asyncio.sleep(1)
        result = AsyncResult(task_id)
        if result.ready():
            if result.successful():
                data = result.get()
                user_link = data.get("user_link")
                if user_link:
                    await bot.send_message(chat_id, f"–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤! –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n{user_link}")
                else:
                    await bot.send_message(chat_id, "–§–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            else:
                await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.")
            return
    await bot.send_message(chat_id, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "/admin_excel")
async def admin_excel_handler(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        weeks = list_admin_weeks()
        if not weeks:
            await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á—ë—Ç–æ–≤.")
            return

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=week, callback_data=f"admin_excel:{week}")]
                for week in weeks
            ]
        )
        await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –æ—Ç—á—ë—Ç–∞:", reply_markup=kb)

    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—á—ë—Ç–æ–≤.")
        print(f"[ADMIN EXCEL ERROR] {e}")


# üîπ –•–µ–Ω–¥–ª–µ—Ä –∫–Ω–æ–ø–∫–∏ (–∫–æ–ª–±—ç–∫)
@router.callback_query(F.data.startswith("admin_excel:"))
async def send_admin_excel_link(callback: CallbackQuery):
    week = callback.data.split(":")[1]
    path = f"admin/admin_orders_{week}.xlsx"

    url = get_yadisk_public_url(path)
    if url:
        await callback.message.answer(f"üì• –û—Ç—á—ë—Ç –∑–∞ –Ω–µ–¥–µ–ª—é {week}:\n{url}")
    else:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª.")