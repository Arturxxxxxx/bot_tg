# from keybords.day_select import day_select_keyboard
# from keybords.time_select import time_select_keyboard
# from keybords.main_kb import main_menu_kb
# from aiogram import Router, F, Bot
# from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
# from aiogram.fsm.context import FSMContext
# from datetime import datetime
# from celery.result import AsyncResult
# from states.load_states import LoadDataStates
# from utils.upload_excel import generate_upload_and_get_links
# from data.database import conn
# import asyncio

# router = Router()

# DAYS_FULL = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

# def get_available_days(week: str) -> list:
#     today = datetime.today()
#     weekday_index = today.weekday()  # 0 = Monday, 6 = Sunday

#     if week == "current":
#         return DAYS_FULL[weekday_index:]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
#     else:
#         return DAYS_FULL  # –í—Å—è –Ω–µ–¥–µ–ª—è

# @router.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
# async def start_load_data(message: Message, state: FSMContext):
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:",
#         reply_markup=time_select_keyboard()
#     )
#     await state.set_state(LoadDataStates.choosing_time)


# @router.message(LoadDataStates.choosing_time)
# async def choose_time(message: Message, state: FSMContext):
#     if message.text == "üîô –ù–∞–∑–∞–¥":
#         await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_kb())
#         await state.clear()
#         return

#     await state.update_data(time=message.text)

#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:",
#         reply_markup=ReplyKeyboardMarkup(keyboard=[
#             [KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è")],
#             [KeyboardButton(text="üóì –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è")],
#             [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
#         ], resize_keyboard=True)
#     )
#     await state.set_state(LoadDataStates.choosing_week)


# @router.message(LoadDataStates.choosing_week)
# async def choose_week(message: Message, state: FSMContext):
#     if message.text == "üîô –ù–∞–∑–∞–¥":
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:", reply_markup=time_select_keyboard())
#         await state.set_state(LoadDataStates.choosing_time)
#         return

#     week = message.text.strip()
#     if week not in ["üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è", "üóì –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"]:
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –Ω–µ–¥–µ–ª—é.")
#         return

#     week_key = "current" if week == "üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è" else "next"
#     await state.update_data(week=week_key)

#     available_days = get_available_days(week_key)
#     if not available_days:
#         await message.answer("–ù–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π.")
#         return

#     keyboard = day_select_keyboard(available_days)
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)
#     await state.set_state(LoadDataStates.choosing_day)


# @router.message(LoadDataStates.choosing_day)
# async def choose_day(message: Message, state: FSMContext):
#     if message.text == "üîô –ù–∞–∑–∞–¥":
#         week = (await state.get_data()).get("week", "current")
#         keyboard = ReplyKeyboardMarkup(keyboard=[
#             [KeyboardButton(text="üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è")],
#             [KeyboardButton(text="üóì –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è")],
#             [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")],
#         ], resize_keyboard=True)
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=keyboard)
#         await state.set_state(LoadDataStates.choosing_week)
#         return

#     await state.update_data(day=message.text)
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
#     await state.set_state(LoadDataStates.entering_portion)

# @router.message(LoadDataStates.entering_portion)
# async def enter_portion(message: Message, state: FSMContext, bot: Bot):
#     if not message.text.isdigit():
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîô –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
#         return

#     portion = int(message.text)
#     data = await state.get_data()

#     day = data['day']
#     time = data['time']
#     week = data.get('week', 'current')
#     user_id = message.from_user.id
#     username = message.from_user.username or f"id_{user_id}"

#     cursor = conn.cursor()

#     # –ü—Ä–æ–≤–µ—Ä–∫–∞: –±—ã–ª–∞ –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
#     cursor.execute("""
#         SELECT id, portion FROM portions
#         WHERE user_id = ? AND week = ? AND day = ? AND time = ?
#     """, (user_id, week, day, time))
#     existing = cursor.fetchone()

#     portion_diff_str = ""
#     if existing:
#         portion_id, old_portion = existing
#         diff = portion - old_portion
#         if diff > 0:
#             portion_diff_str = f" (‚è´ +{diff})"
#         elif diff < 0:
#             portion_diff_str = f" (‚è¨ {diff})"

#         cursor.execute("""
#             UPDATE portions SET portion = ?, created_at = ?
#             WHERE id = ?
#         """, (portion, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), portion_id))
#     else:
#         cursor.execute("""
#             INSERT INTO portions (user_id, username, day, time, portion, created_at, week)
#             VALUES (?, ?, ?, ?, ?, ?, ?)
#         """, (
#             user_id,
#             username,
#             day,
#             time,
#             portion,
#             datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
#             week
#         ))

#     conn.commit()

#     # –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
#     task = generate_upload_and_get_links.delay(user_id, username)
#     asyncio.create_task(check_task_and_send_result(bot, user_id, task.id))

#     await message.answer(
#         f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
#         f"üìÖ {day} | üïí {time} | üóì –ù–µ–¥–µ–ª—è: {'—ç—Ç–∞' if week == 'current' else '—Å–ª–µ–¥—É—é—â–∞—è'}\n"
#         f"üçΩÔ∏è {portion} –ø–æ—Ä—Ü–∏–π{portion_diff_str}",
#         reply_markup=main_menu_kb()
#     )
#     await state.clear()


# async def check_task_and_send_result(bot, chat_id, task_id):
#     for _ in range(20):
#         await asyncio.sleep(1)
#         result = AsyncResult(task_id)
#         if result.ready():
#             if result.successful():
#                 data = result.get()
#                 user_link = data.get("user_link")
#                 if user_link:
#                     await bot.send_message(chat_id, f"–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤! –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n{user_link}")
#                 else:
#                     await bot.send_message(chat_id, "–§–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#             else:
#                 await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.")
#             return
#     await bot.send_message(chat_id, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


from keybords.day_select import day_select_keyboard
from keybords.time_select import time_select_keyboard
from keybords.main_kb import main_menu_kb
from aiogram import Router, F, Bot
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from datetime import datetime
from celery.result import AsyncResult
from states.load_states import LoadDataStates
from utils.upload_excel import generate_upload_and_get_links
from data.database import conn
import asyncio
import logging

router = Router()

DAYS_FULL = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

CURRENT_WEEK = "üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"
NEXT_WEEK = "üóì –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"
BACK_BUTTON = "üîô –ù–∞–∑–∞–¥"

MAX_CELERY_WAIT_SECONDS = 20


def week_select_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text=CURRENT_WEEK)],
        [KeyboardButton(text=NEXT_WEEK)],
        [KeyboardButton(text=BACK_BUTTON)],
    ], resize_keyboard=True)


def get_available_days(week: str) -> list:
    today = datetime.today()
    weekday_index = today.weekday()  # 0 = Monday, 6 = Sunday
    return DAYS_FULL[weekday_index:] if week == "current" else DAYS_FULL


@router.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def start_load_data(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:", reply_markup=time_select_keyboard())
    await state.set_state(LoadDataStates.choosing_time)


@router.message(LoadDataStates.choosing_time)
async def choose_time(message: Message, state: FSMContext):
    if message.text not in ["–ó–∞–ø–∞–π–∫–∞", "–î–µ–Ω—å", "–ù–æ—á—å", BACK_BUTTON]:  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    if message.text == BACK_BUTTON:
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_kb())
        await state.clear()
        return

    await state.update_data(time=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=week_select_keyboard())
    await state.set_state(LoadDataStates.choosing_week)



@router.message(LoadDataStates.choosing_week)
async def choose_week(message: Message, state: FSMContext):
    if message.text not in [CURRENT_WEEK, NEXT_WEEK, BACK_BUTTON]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return

    if message.text == BACK_BUTTON:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:", reply_markup=time_select_keyboard())
        await state.set_state(LoadDataStates.choosing_time)
        return

    week_key = "current" if message.text == CURRENT_WEEK else "next"
    await state.update_data(week=week_key)

    available_days = get_available_days(week_key)
    keyboard = day_select_keyboard(available_days)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)
    await state.set_state(LoadDataStates.choosing_day)



@router.message(LoadDataStates.choosing_day)
async def choose_day(message: Message, state: FSMContext):
    data = await state.get_data()
    week = data.get("week", "current")
    valid_days = get_available_days(week) + [BACK_BUTTON]

    if message.text not in valid_days:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return

    if message.text == BACK_BUTTON:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=week_select_keyboard())
        await state.set_state(LoadDataStates.choosing_week)
        return

    await state.update_data(day=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
    await state.set_state(LoadDataStates.entering_portion)


@router.message(LoadDataStates.entering_portion)
async def enter_portion(message: Message, state: FSMContext, bot: Bot):
    if message.text == BACK_BUTTON:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å–Ω–æ–≤–∞:")
        data = await state.get_data()
        week = data.get("week", "current")
        keyboard = day_select_keyboard(get_available_days(week))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)
        await state.set_state(LoadDataStates.choosing_day)
        return
    
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîô –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    portion = int(message.text)
    data = await state.get_data()
    day, time, week = data['day'], data['time'], data.get('week', 'current')
    user_id, username = message.from_user.id, message.from_user.username or f"id_{message.from_user.id}"

    try:
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, portion FROM portions
            WHERE user_id = ? AND week = ? AND day = ? AND time = ?
        """, (user_id, week, day, time))
        existing = cursor.fetchone()

        portion_diff_str = ""
        if existing:
            portion_id, old_portion = existing
            diff = portion - old_portion
            portion_diff_str = f" (‚è´ +{diff})" if diff > 0 else f" (‚è¨ {diff})" if diff < 0 else ""
            cursor.execute("""
                UPDATE portions SET portion = ?, created_at = ?
                WHERE id = ?
            """, (portion, datetime.now().strftime('%Y-%m-%d %H:%M:%S'), portion_id))
        else:
            cursor.execute("""
                INSERT INTO portions (user_id, username, day, time, portion, created_at, week)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                user_id,
                username,
                day,
                time,
                portion,
                datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                week
            ))
        conn.commit()
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    task = generate_upload_and_get_links.delay(user_id, username)
    asyncio.create_task(check_task_and_send_result(bot, user_id, task.id))

    await message.answer(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
        f"üìÖ {day} | üïí {time} | üóì –ù–µ–¥–µ–ª—è: {'—ç—Ç–∞' if week == 'current' else '—Å–ª–µ–¥—É—é—â–∞—è'}\n"
        f"üçΩÔ∏è {portion} –ø–æ—Ä—Ü–∏–π{portion_diff_str}",
        reply_markup=main_menu_kb()
    )
    await state.clear()


async def check_task_and_send_result(bot: Bot, chat_id: int, task_id: str):
    for _ in range(MAX_CELERY_WAIT_SECONDS):
        await asyncio.sleep(1)
        result = AsyncResult(task_id)
        if result.ready():
            if result.successful():
                try:
                    data = result.get(timeout=2)
                    user_link = data.get("user_link")
                    if user_link:
                        await bot.send_message(chat_id, f"–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤! –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n{user_link}")
                    else:
                        await bot.send_message(chat_id, "–§–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except Exception as e:
                    logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏")
                    await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
            else:
                logging.error(f"Celery task failed: {result.result}")
                await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.")
            return
    await bot.send_message(chat_id, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
