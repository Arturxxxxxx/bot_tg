from keybords.day_select import day_select_keyboard
from keybords.time_select import time_select_keyboard
from keybords.main_kb import main_menu_kb
from aiogram import Router, F, Bot
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from datetime import datetime
from celery.result import AsyncResult
from states.load_states import LoadDataStates
from utils.upload_excel import generate_upload_and_get_links
from data.database import conn
from datetime import datetime, time, timedelta, date
import asyncio
import logging

router = Router()

DAYS_FULL = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]

CURRENT_WEEK = "üìÖ –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è"
NEXT_WEEK = "üóì –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"
BACK_BUTTON = "üîô –ù–∞–∑–∞–¥"

MAX_CELERY_WAIT_SECONDS = 20


def week_select_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text=CURRENT_WEEK)],
        [KeyboardButton(text=NEXT_WEEK)],
        [KeyboardButton(text=BACK_BUTTON)],
    ], resize_keyboard=True)



def get_available_day_options(week: str) -> list[tuple[str, str]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–µ–π:
    (–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏, ISO-–¥–∞—Ç–∞ —ç—Ç–æ–≥–æ –¥–Ω—è)
    """
    today = datetime.now()
    weekday_index = today.weekday()  # 0 = Monday
    noon = time(12, 0)

    # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –Ω–µ–¥–µ–ª–∏
    if week == "next":
        monday = today.date() + timedelta(days=7 - weekday_index)
    else:
        monday = today.date() - timedelta(days=weekday_index)

    days = []
    for i in range(7):
        current_day = monday + timedelta(days=i)
        is_today = current_day == today.date()

        if week == "current":
            if current_day <= today.date():
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ–≥–æ–¥–Ω—è –∏ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ
            if today.time() >= noon and current_day == today.date() + timedelta(days=1):
                continue  # –ü–æ—Å–ª–µ 12:00 ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏ –∑–∞–≤—Ç—Ä–∞

        day_name = DAYS_FULL[i]
        iso_date = current_day.isoformat()
        days.append((day_name, iso_date))

    return days


@router.message(F.text == "üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
async def start_load_data(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:", reply_markup=time_select_keyboard())
    await state.set_state(LoadDataStates.choosing_time)


@router.message(LoadDataStates.choosing_time)
async def choose_time(message: Message, state: FSMContext):
    if message.text not in ["–ó–∞–ø–∞–π–∫–∞", "–î–µ–Ω—å", "–ù–æ—á—å", BACK_BUTTON]:  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –∫–Ω–æ–ø–∫–∏
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.")
        return

    if message.text == BACK_BUTTON:
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_kb())
        await state.clear()
        return

    await state.update_data(time=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=week_select_keyboard())
    await state.set_state(LoadDataStates.choosing_week)



@router.message(LoadDataStates.choosing_week)
async def choose_week(message: Message, state: FSMContext):
    if message.text not in [CURRENT_WEEK, NEXT_WEEK, BACK_BUTTON]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return

    if message.text == BACK_BUTTON:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫:", reply_markup=time_select_keyboard())
        await state.set_state(LoadDataStates.choosing_time)
        return

    week_key = "current" if message.text == CURRENT_WEEK else "next"
    await state.update_data(week=week_key)

    day_options = get_available_day_options(week_key)
    keyboard = day_select_keyboard(day_options)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –¥–Ω–µ–π –≤ FSMContext
    await state.update_data(day_options=day_options)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=keyboard)
    await state.set_state(LoadDataStates.choosing_day)




@router.message(LoadDataStates.choosing_day)
async def choose_day(message: Message, state: FSMContext):
    data = await state.get_data()
    week = data.get("week", "current")
    day_options = data.get("day_options", [])
    valid_day_names = [d[0] for d in day_options] + [BACK_BUTTON]

    if message.text not in valid_day_names:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return

    if message.text == BACK_BUTTON:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é:", reply_markup=week_select_keyboard())
        await state.set_state(LoadDataStates.choosing_week)
        return

    # –ü–æ–ª—É—á–∞–µ–º iso-–¥–∞—Ç—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –¥–Ω—è
    day_name = message.text
    day_date = next((date for name, date in day_options if name == day_name), None)

    if not day_date:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞—Ç—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–Ω—è.")
        return

    await state.update_data(day=day_name, day_date=day_date)

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(LoadDataStates.entering_portion)




@router.message(LoadDataStates.entering_portion)
async def enter_portion(message: Message, state: FSMContext, bot: Bot):
    # ----- –æ—Ç–º–µ–Ω–∞ --------------------------------------------------------
    if message.text == BACK_BUTTON:
        d = await state.get_data()
        week_key = d.get("week", "current")
        days_kb = day_select_keyboard(
            [name for name, _ in get_available_day_options(week_key)]
        )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=days_kb)
        await state.set_state(LoadDataStates.choosing_day)
        return

    # ----- –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–∞ ----------------------------------------------
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ üîô –ù–∞–∑–∞–¥.")
        return
    portion = int(message.text)

    # ----- –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM --------------------------------------------------
    data = await state.get_data()
    day_iso   = data["day_date"]      # '2025‚Äë07‚Äë09'
    time_slot = data["time"]          # –î–µ–Ω—å | –ù–æ—á—å | –ó–∞–ø–∞–π–∫–∞
    week_key  = data.get("week", "current")
    user_id   = message.from_user.id

    # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ¬´—Ü–µ–ª–µ–≤–æ–π¬ª –Ω–µ–¥–µ–ª–∏
    sel_dt          = datetime.fromisoformat(day_iso).date()
    monday_of_week  = sel_dt - timedelta(days=sel_dt.weekday())

    # ----- –∫–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -----------------------------------------
    cur = conn.cursor()
    cur.execute("""
        SELECT c.name
        FROM   companies c
        JOIN   user_company uc ON uc.company_id = c.id
        WHERE  uc.user_id = ?
    """, (user_id,))
    row = cur.fetchone()
    if not row:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é.", reply_markup=main_menu_kb())
        return
    company_name = row[0]

    # ----- –∑–∞–ø–∏—Å—å / –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ -------------------------------------------
    try:
        cur.execute("""
            SELECT id, portion
            FROM   portions
            WHERE  user_id=? AND day=? AND time=?
        """, (user_id, day_iso, time_slot))
        existing = cur.fetchone()

        diff_note = ""
        now_str   = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        NOTIFY_CHAT_ID = -4978614010  # ‚Üê —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å ID –≥—Ä—É–ø–ø—ã/—á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        if existing:
            pid, prev = existing
            diff = portion - prev
            diff_note = f" (‚è´ +{diff})" if diff > 0 else f" (‚è¨ {diff})" if diff < 0 else ""

            cur.execute(
                "UPDATE portions SET portion=?, created_at=? WHERE id=?",
                (portion, now_str, pid)
            )

            if diff != 0:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                msg = (
                    f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ü–∏–π\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.full_name} (@{message.from_user.username})\n"
                    f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company_name}\n"
                    f"üìÖ {day_iso} | üïí {time_slot}\n"
                    f"üçΩ –ë—ã–ª–æ: {prev} ‚Üí –°—Ç–∞–ª–æ: {portion}"
                )
                try:
                    await bot.send_message(NOTIFY_CHAT_ID, msg)
                except Exception:
                    logging.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ü–∏–π")

        else:
            cur.execute("""
                INSERT INTO portions
                (user_id, company_name, day, time, portion,
                 created_at, week_monday, week_key)
                VALUES (?,?,?,?,?,?,?,?)
            """, (user_id, company_name, day_iso, time_slot,
                  portion, now_str, monday_of_week.isoformat(), week_key))
        conn.commit()
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # ----- —Å–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç—ã -------------------------------------------------
    # –≤—ã—á–∏—Å–ª—è–µ–º ISO‚Äë–≥–æ–¥ –∏ –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    year, week_num, _ = sel_dt.isocalendar()

    task = generate_upload_and_get_links.delay(
        user_id=user_id,
        company_name=company_name,
        year=year,
        week_num=week_num          # ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º!
    )
    asyncio.create_task(check_task_and_send_result(bot, user_id, task.id))

    # ----- –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é --------------------------------------------
    week_label = "—ç—Ç–∞" if week_key == "current" else "—Å–ª–µ–¥—É—é—â–∞—è"
    await message.answer(
        f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n"
        f"üìÖ {day_iso} | üïí {time_slot} | üóì –ù–µ–¥–µ–ª—è: {week_label}\n"
        f"üçΩ {portion} –ø–æ—Ä—Ü–∏–π{diff_note}",
        reply_markup=main_menu_kb()
    )
    await state.clear()


async def check_task_and_send_result(bot: Bot, chat_id: int, task_id: str):
    for _ in range(MAX_CELERY_WAIT_SECONDS):
        await asyncio.sleep(1)
        result = AsyncResult(task_id)
        if result.ready():
            if result.successful():
                try:
                    data = result.get(timeout=2)
                    user_link = data.get("user_link")
                    if user_link:
                        await bot.send_message(chat_id, f"–í–∞—à —Ñ–∞–π–ª –≥–æ—Ç–æ–≤! –í–æ—Ç —Å—Å—ã–ª–∫–∞:\n{user_link}")
                    else:
                        await bot.send_message(chat_id, "–§–∞–π–ª —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                except Exception as e:
                    logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–¥–∞—á–∏")
                    await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.")
            else:
                logging.error(f"Celery task failed: {result.result}")
                await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞.")
            return
    await bot.send_message(chat_id, "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
